{"sha":"ac2b38603c2cd361741cdeabb49ad3d9cbc6c535","node_id":"MDY6Q29tbWl0NTI5ODc5MDphYzJiMzg2MDNjMmNkMzYxNzQxY2RlYWJiNDlhZDNkOWNiYzZjNTM1","commit":{"author":{"name":"TSC21","email":"n.marques21@hotmail.com","date":"2021-05-07T08:15:38Z"},"committer":{"name":"Nuno Marques","email":"n.marques21@hotmail.com","date":"2021-06-21T14:36:44Z"},"message":"microRTPS: client: add missing \"-p\" option for the UART poll timeout and use microsecs for the send/rcv thread sleeps","tree":{"sha":"b3e0c549e474905264c713df894bbe7e18303e85","url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/trees/b3e0c549e474905264c713df894bbe7e18303e85"},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/commits/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535","html_url":"https://github.com/PX4/PX4-Autopilot/commit/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535","comments_url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535/comments","author":{"login":"TSC21","id":5048656,"node_id":"MDQ6VXNlcjUwNDg2NTY=","avatar_url":"https://avatars.githubusercontent.com/u/5048656?v=4","gravatar_id":"","url":"https://api.github.com/users/TSC21","html_url":"https://github.com/TSC21","followers_url":"https://api.github.com/users/TSC21/followers","following_url":"https://api.github.com/users/TSC21/following{/other_user}","gists_url":"https://api.github.com/users/TSC21/gists{/gist_id}","starred_url":"https://api.github.com/users/TSC21/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TSC21/subscriptions","organizations_url":"https://api.github.com/users/TSC21/orgs","repos_url":"https://api.github.com/users/TSC21/repos","events_url":"https://api.github.com/users/TSC21/events{/privacy}","received_events_url":"https://api.github.com/users/TSC21/received_events","type":"User","site_admin":false},"committer":{"login":"TSC21","id":5048656,"node_id":"MDQ6VXNlcjUwNDg2NTY=","avatar_url":"https://avatars.githubusercontent.com/u/5048656?v=4","gravatar_id":"","url":"https://api.github.com/users/TSC21","html_url":"https://github.com/TSC21","followers_url":"https://api.github.com/users/TSC21/followers","following_url":"https://api.github.com/users/TSC21/following{/other_user}","gists_url":"https://api.github.com/users/TSC21/gists{/gist_id}","starred_url":"https://api.github.com/users/TSC21/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/TSC21/subscriptions","organizations_url":"https://api.github.com/users/TSC21/orgs","repos_url":"https://api.github.com/users/TSC21/repos","events_url":"https://api.github.com/users/TSC21/events{/privacy}","received_events_url":"https://api.github.com/users/TSC21/received_events","type":"User","site_admin":false},"parents":[{"sha":"0cc79f3e4838cb0bca58ee5f14422a076a660348","url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/0cc79f3e4838cb0bca58ee5f14422a076a660348","html_url":"https://github.com/PX4/PX4-Autopilot/commit/0cc79f3e4838cb0bca58ee5f14422a076a660348"}],"stats":{"total":20,"additions":11,"deletions":9},"files":[{"sha":"89cf558ff4871f08b11e51b714dea137de0809a3","filename":"msg/templates/uorb_microcdr/microRTPS_client.cpp.em","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535/msg%2Ftemplates%2Fuorb_microcdr%2FmicroRTPS_client.cpp.em","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535/msg%2Ftemplates%2Fuorb_microcdr%2FmicroRTPS_client.cpp.em","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/msg%2Ftemplates%2Fuorb_microcdr%2FmicroRTPS_client.cpp.em?ref=ac2b38603c2cd361741cdeabb49ad3d9cbc6c535","patch":"@@ -176,7 +176,7 @@ void *send(void *args)\n \t\t\t}\n \t\t}\n @[    end for]@\n-\t\tpx4_usleep(_options.sleep_ms * 1000);\n+\t\tpx4_usleep(_options.sleep_us);\n \t\t++data->sent_loop;\n \t}\n \n@@ -310,7 +310,7 @@ void micrortps_start_topics(struct timespec &begin, uint64_t &total_rcvd, uint64\n \t\t// loop forever if informed loop number is negative\n \t\tif (_options.loops >= 0 && rcvd_loop >= _options.loops) { break; }\n \n-\t\tpx4_usleep(_options.sleep_ms * 1000);\n+\t\tpx4_usleep(_options.sleep_us);\n \t\t++rcvd_loop;\n \t}\n "},{"sha":"37b149d9899865cc523d94ee0d35b2ccb9210d0b","filename":"src/modules/micrortps_bridge/micrortps_client/microRTPS_client.h","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535/src%2Fmodules%2Fmicrortps_bridge%2Fmicrortps_client%2FmicroRTPS_client.h","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535/src%2Fmodules%2Fmicrortps_bridge%2Fmicrortps_client%2FmicroRTPS_client.h","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2Fmicrortps_bridge%2Fmicrortps_client%2FmicroRTPS_client.h?ref=ac2b38603c2cd361741cdeabb49ad3d9cbc6c535","patch":"@@ -50,7 +50,7 @@\n #include <uORB/uORB.h>\n \n #define LOOPS -1\n-#define SLEEP_MS 1\n+#define SLEEP_US 1\n #define BAUDRATE 460800\n #define DEVICE \"/dev/ttyACM0\"\n #define POLL_MS 1\n@@ -81,7 +81,7 @@ struct options {\n \tchar ip[16] = IP;\n \tuint16_t recv_port = DEFAULT_RECV_PORT;\n \tuint16_t send_port = DEFAULT_SEND_PORT;\n-\tuint32_t sleep_ms = SLEEP_MS;\n+\tuint32_t sleep_us = SLEEP_US;\n \tuint32_t baudrate = BAUDRATE;\n \tuint32_t poll_ms = POLL_MS;\n \tint loops = LOOPS;"},{"sha":"ae81c0a10319246138eee5792db56b54e8b80d1a","filename":"src/modules/micrortps_bridge/micrortps_client/microRTPS_client_main.cpp","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535/src%2Fmodules%2Fmicrortps_bridge%2Fmicrortps_client%2FmicroRTPS_client_main.cpp","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/ac2b38603c2cd361741cdeabb49ad3d9cbc6c535/src%2Fmodules%2Fmicrortps_bridge%2Fmicrortps_client%2FmicroRTPS_client_main.cpp","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2Fmicrortps_bridge%2Fmicrortps_client%2FmicroRTPS_client_main.cpp?ref=ac2b38603c2cd361741cdeabb49ad3d9cbc6c535","patch":"@@ -78,7 +78,7 @@ static void usage(const char *name)\n \tPRINT_MODULE_USAGE_PARAM_INT('p', -1, 1, 1000, \"Poll timeout for UART in ms\", true);\n \tPRINT_MODULE_USAGE_PARAM_INT('l', 10000, -1, 100000, \"Limit number of iterations until the program exits (-1=infinite)\",\n \t\t\t\t     true);\n-\tPRINT_MODULE_USAGE_PARAM_INT('w', 1, 1, 1000, \"Time in ms for which each iteration sleeps\", true);\n+\tPRINT_MODULE_USAGE_PARAM_INT('w', 1, 1, 1000000, \"Time in us for which each iteration sleeps\", true);\n \tPRINT_MODULE_USAGE_PARAM_INT('r', 2019, 0, 65536, \"Select UDP Network Port for receiving (local)\", true);\n \tPRINT_MODULE_USAGE_PARAM_INT('s', 2020, 0, 65536, \"Select UDP Network Port for sending (remote)\", true);\n \tPRINT_MODULE_USAGE_PARAM_STRING('i', \"127.0.0.1\", \"<x.x.x.x>\", \"Select IP address (remote)\", true);\n@@ -106,7 +106,7 @@ static int parse_options(int argc, char *argv[])\n \n \t\tcase 'l': _options.loops           =  strtol(myoptarg, nullptr, 10);    break;\n \n-\t\tcase 'w': _options.sleep_ms        = strtoul(myoptarg, nullptr, 10);    break;\n+\t\tcase 'w': _options.sleep_us        = strtoul(myoptarg, nullptr, 10);    break;\n \n \t\tcase 'b': {\n \t\t\t\tint baudrate = 0;\n@@ -120,6 +120,8 @@ static int parse_options(int argc, char *argv[])\n \t\t\t\tbreak;\n \t\t\t}\n \n+\t\tcase 'p': _options.poll_ms         = strtoul(myoptarg, nullptr, 10);    break;\n+\n \t\tcase 'r': _options.recv_port       = strtoul(myoptarg, nullptr, 10);    break;\n \n \t\tcase 's': _options.send_port       = strtoul(myoptarg, nullptr, 10);    break;\n@@ -165,16 +167,16 @@ static int micrortps_start(int argc, char *argv[])\n \t\t\t\t\t\t       _options.sw_flow_control, _options.hw_flow_control, _options.verbose_debug);\n \t\t\tPX4_INFO(\"UART transport: device: %s; baudrate: %\" PRIu32 \"; sleep: %\" PRIu32 \"ms; poll: %\" PRIu32\n \t\t\t\t \"ms; flow_control: %s\",\n-\t\t\t\t _options.device, _options.baudrate, _options.sleep_ms, _options.poll_ms,\n+\t\t\t\t _options.device, _options.baudrate, _options.sleep_us, _options.poll_ms,\n \t\t\t\t _options.sw_flow_control ? \"SW enabled\" : (_options.hw_flow_control ? \"HW enabled\" : \"No\"));\n \t\t}\n \t\tbreak;\n \n \tcase options::eTransports::UDP: {\n \t\t\ttransport_node = new UDP_node(_options.ip, _options.recv_port, _options.send_port,\n \t\t\t\t\t\t      _options.verbose_debug);\n-\t\t\tPX4_INFO(\"UDP transport: ip address: %s; recv port: %\" PRIu16 \"; send port: %\" PRIu16 \"; sleep: %\" PRIu32 \"ms\",\n-\t\t\t\t _options.ip, _options.recv_port, _options.send_port, _options.sleep_ms);\n+\t\t\tPX4_INFO(\"UDP transport: ip address: %s; recv port: %\" PRIu16 \"; send port: %\" PRIu16 \"; sleep: %\" PRIu32 \"us\",\n+\t\t\t\t _options.ip, _options.recv_port, _options.send_port, _options.sleep_us);\n \n \t\t}\n \t\tbreak;"}]}