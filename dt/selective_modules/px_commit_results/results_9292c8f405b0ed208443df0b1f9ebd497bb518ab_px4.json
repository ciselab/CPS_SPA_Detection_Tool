{"sha":"9292c8f405b0ed208443df0b1f9ebd497bb518ab","node_id":"MDY6Q29tbWl0NTI5ODc5MDo5MjkyYzhmNDA1YjBlZDIwODQ0M2RmMGIxZjllYmQ0OTdiYjUxOGFi","commit":{"author":{"name":"Mark Whitehorn","email":"kd0aij@gmail.com","date":"2014-12-20T17:27:02Z"},"committer":{"name":"Mark Whitehorn","email":"kd0aij@gmail.com","date":"2014-12-24T21:06:05Z"},"message":"add interrupt latency printout command and mean/variance to interval performance counter","tree":{"sha":"a1f44a7975b860c5c431cb46a668d5897d2a5fd3","url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/trees/a1f44a7975b860c5c431cb46a668d5897d2a5fd3"},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/commits/9292c8f405b0ed208443df0b1f9ebd497bb518ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/9292c8f405b0ed208443df0b1f9ebd497bb518ab","html_url":"https://github.com/PX4/PX4-Autopilot/commit/9292c8f405b0ed208443df0b1f9ebd497bb518ab","comments_url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/9292c8f405b0ed208443df0b1f9ebd497bb518ab/comments","author":{"login":"kd0aij","id":2300221,"node_id":"MDQ6VXNlcjIzMDAyMjE=","avatar_url":"https://avatars.githubusercontent.com/u/2300221?v=4","gravatar_id":"","url":"https://api.github.com/users/kd0aij","html_url":"https://github.com/kd0aij","followers_url":"https://api.github.com/users/kd0aij/followers","following_url":"https://api.github.com/users/kd0aij/following{/other_user}","gists_url":"https://api.github.com/users/kd0aij/gists{/gist_id}","starred_url":"https://api.github.com/users/kd0aij/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kd0aij/subscriptions","organizations_url":"https://api.github.com/users/kd0aij/orgs","repos_url":"https://api.github.com/users/kd0aij/repos","events_url":"https://api.github.com/users/kd0aij/events{/privacy}","received_events_url":"https://api.github.com/users/kd0aij/received_events","type":"User","site_admin":false},"committer":{"login":"kd0aij","id":2300221,"node_id":"MDQ6VXNlcjIzMDAyMjE=","avatar_url":"https://avatars.githubusercontent.com/u/2300221?v=4","gravatar_id":"","url":"https://api.github.com/users/kd0aij","html_url":"https://github.com/kd0aij","followers_url":"https://api.github.com/users/kd0aij/followers","following_url":"https://api.github.com/users/kd0aij/following{/other_user}","gists_url":"https://api.github.com/users/kd0aij/gists{/gist_id}","starred_url":"https://api.github.com/users/kd0aij/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kd0aij/subscriptions","organizations_url":"https://api.github.com/users/kd0aij/orgs","repos_url":"https://api.github.com/users/kd0aij/repos","events_url":"https://api.github.com/users/kd0aij/events{/privacy}","received_events_url":"https://api.github.com/users/kd0aij/received_events","type":"User","site_admin":false},"parents":[{"sha":"92eb637d00dc7bec347ddb6d2ddfd90bb27a0b34","url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/92eb637d00dc7bec347ddb6d2ddfd90bb27a0b34","html_url":"https://github.com/PX4/PX4-Autopilot/commit/92eb637d00dc7bec347ddb6d2ddfd90bb27a0b34"}],"stats":{"total":76,"additions":60,"deletions":16},"files":[{"sha":"603c2eb9da7a103882d869c41de2d56c75e55118","filename":"src/drivers/stm32/drv_hrt.c","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fdrivers%2Fstm32%2Fdrv_hrt.c","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fdrivers%2Fstm32%2Fdrv_hrt.c","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fdrivers%2Fstm32%2Fdrv_hrt.c?ref=9292c8f405b0ed208443df0b1f9ebd497bb518ab","patch":"@@ -253,9 +253,11 @@ static uint16_t\t\t\tlatency_baseline;\n static uint16_t\t\t\tlatency_actual;\n \n /* latency histogram */\n-#define LATENCY_BUCKET_COUNT\t8\n-static const uint16_t\t\tlatency_buckets[LATENCY_BUCKET_COUNT] = { 1, 2, 5, 10, 20, 50, 100, 1000 };\n-static uint32_t\t\t\tlatency_counters[LATENCY_BUCKET_COUNT + 1];\n+#define LATENCY_BUCKET_COUNT 8\n+__EXPORT const uint16_t latency_bucket_count = LATENCY_BUCKET_COUNT;\n+__EXPORT const uint16_t\tlatency_buckets[LATENCY_BUCKET_COUNT] = { 1, 2, 5, 10, 20, 50, 100, 1000 };\n+__EXPORT uint32_t\t\tlatency_counters[LATENCY_BUCKET_COUNT + 1];\n+\n \n /* timer-specific functions */\n static void\t\thrt_tim_init(void);"},{"sha":"f9e90652d757ae8238ebe8dcadde94cce07ab848","filename":"src/modules/systemlib/perf_counter.c","status":"modified","additions":42,"deletions":11,"changes":53,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fmodules%2Fsystemlib%2Fperf_counter.c","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fmodules%2Fsystemlib%2Fperf_counter.c","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2Fsystemlib%2Fperf_counter.c?ref=9292c8f405b0ed208443df0b1f9ebd497bb518ab","patch":"@@ -41,7 +41,7 @@\n #include <stdio.h>\n #include <sys/queue.h>\n #include <drivers/drv_hrt.h>\n-\n+#include <math.h>\n #include \"perf_counter.h\"\n \n /**\n@@ -84,7 +84,8 @@ struct perf_ctr_interval {\n \tuint64_t\t\ttime_last;\n \tuint64_t\t\ttime_least;\n \tuint64_t\t\ttime_most;\n-\n+\tfloat\t\t\tmean;\n+\tfloat\t\t\tM2;\n };\n \n /**\n@@ -109,6 +110,7 @@ perf_alloc(enum perf_counter_type type, const char *name)\n \n \tcase PC_INTERVAL:\n \t\tctr = (perf_counter_t)calloc(sizeof(struct perf_ctr_interval), 1);\n+\n \t\tbreak;\n \n \tdefault:\n@@ -156,15 +158,23 @@ perf_count(perf_counter_t handle)\n \t\tcase 1:\n \t\t\tpci->time_least = now - pci->time_last;\n \t\t\tpci->time_most = now - pci->time_last;\n+\t\t\tpci->mean = pci->time_least / 1e6f;\n+\t\t\tpci->M2 = 0;\n \t\t\tbreak;\n \t\tdefault: {\n-\t\t\thrt_abstime interval = now - pci->time_last;\n-\t\t\tif (interval < pci->time_least)\n-\t\t\t\tpci->time_least = interval;\n-\t\t\tif (interval > pci->time_most)\n-\t\t\t\tpci->time_most = interval;\n-\t\t\tbreak;\n-\t\t}\n+\t\t\t\thrt_abstime interval = now - pci->time_last;\n+\t\t\t\tif (interval < pci->time_least)\n+\t\t\t\t\tpci->time_least = interval;\n+\t\t\t\tif (interval > pci->time_most)\n+\t\t\t\t\tpci->time_most = interval;\n+\t\t\t\t// maintain mean and variance of interval in seconds\n+\t\t\t\t// Knuth/Welford recursive mean and variance of update intervals (via Wikipedia)\n+\t\t\t\tfloat dt = interval / 1e6f;\n+\t\t\t\tfloat delta_intvl = dt - pci->mean;\n+\t\t\t\tpci->mean += delta_intvl / pci->event_count;\n+\t\t\t\tpci->M2 += delta_intvl * (dt - pci->mean);\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \t\tpci->time_last = now;\n \t\tpci->event_count++;\n@@ -313,13 +323,16 @@ perf_print_counter_fd(int fd, perf_counter_t handle)\n \n \tcase PC_INTERVAL: {\n \t\tstruct perf_ctr_interval *pci = (struct perf_ctr_interval *)handle;\n+\t\tfloat rms = sqrtf(pci->M2 / (pci->event_count-1));\n \n-\t\tdprintf(fd, \"%s: %llu events, %lluus avg, min %lluus max %lluus\\n\",\n+\t\tdprintf(fd, \"%s: %llu events, %lluus avg, min %lluus max %lluus %5.3f msec mean %5.3f msec rms\\n\",\n \t\t       handle->name,\n \t\t       pci->event_count,\n \t\t       (pci->time_last - pci->time_first) / pci->event_count,\n \t\t       pci->time_least,\n-\t\t       pci->time_most);\n+\t\t       pci->time_most,\n+\t\t\t   (double)(1000 * pci->mean),\n+\t\t\t   (double)(1000 * rms));\n \t\tbreak;\n \t}\n \n@@ -365,6 +378,21 @@ perf_print_all(int fd)\n \t}\n }\n \n+extern const uint16_t latency_bucket_count;\n+extern uint32_t latency_counters[];\n+extern const uint16_t latency_buckets[];\n+\n+void\n+perf_print_latency(int fd)\n+{\n+\tdprintf(fd, \"bucket : events\\n\");\n+\tfor (int i = 0; i < latency_bucket_count; i++) {\n+\t\tprintf(\"  %4i : %i\\n\", latency_buckets[i], latency_counters[i]);\n+\t}\n+\t// print the overflow bucket value\n+\tdprintf(fd, \" >%4i : %i\\n\", latency_buckets[latency_bucket_count-1], latency_counters[latency_bucket_count]);\n+}\n+\n void\n perf_reset_all(void)\n {\n@@ -374,4 +402,7 @@ perf_reset_all(void)\n \t\tperf_reset(handle);\n \t\thandle = (perf_counter_t)sq_next(&handle->link);\n \t}\n+\tfor (int i = 0; i <= latency_bucket_count; i++) {\n+\t\tlatency_counters[i] = 0;\n+\t}\n }"},{"sha":"d06606a5d029b91f357ca00c8354323e81da1f3e","filename":"src/modules/systemlib/perf_counter.h","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fmodules%2Fsystemlib%2Fperf_counter.h","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fmodules%2Fsystemlib%2Fperf_counter.h","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2Fsystemlib%2Fperf_counter.h?ref=9292c8f405b0ed208443df0b1f9ebd497bb518ab","patch":"@@ -94,7 +94,7 @@ __EXPORT extern void\t\tperf_begin(perf_counter_t handle);\n  * End a performance event.\n  *\n  * This call applies to counters that operate over ranges of time; PC_ELAPSED etc.\n- * If a call is made without a corresopnding perf_begin call, or if perf_cancel\n+ * If a call is made without a corresponding perf_begin call, or if perf_cancel\n  * has been called subsequently, no change is made to the counter.\n  *\n  * @param handle\t\tThe handle returned from perf_alloc.\n@@ -142,6 +142,13 @@ __EXPORT extern void\t\tperf_print_counter_fd(int fd, perf_counter_t handle);\n  */\n __EXPORT extern void\t\tperf_print_all(int fd);\n \n+/**\n+ * Print hrt latency counters.\n+ *\n+ * @param fd\t\t\tFile descriptor to print to - e.g. 0 for stdout\n+ */\n+__EXPORT extern void\t\tperf_print_latency(int fd);\n+\n /**\n  * Reset all of the performance counters.\n  */"},{"sha":"a788dfc11cffa371dca39ee18128e44233b95df2","filename":"src/systemcmds/perf/perf.c","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fsystemcmds%2Fperf%2Fperf.c","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/9292c8f405b0ed208443df0b1f9ebd497bb518ab/src%2Fsystemcmds%2Fperf%2Fperf.c","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fsystemcmds%2Fperf%2Fperf.c?ref=9292c8f405b0ed208443df0b1f9ebd497bb518ab","patch":"@@ -68,8 +68,12 @@ int perf_main(int argc, char *argv[])\n \t\tif (strcmp(argv[1], \"reset\") == 0) {\n \t\t\tperf_reset_all();\n \t\t\treturn 0;\n+\t\t} else if (strcmp(argv[1], \"latency\") == 0) {\n+\t\t\tperf_print_latency(0 /* stdout */);\n+\t\t\tfflush(stdout);\n+\t\t\treturn 0;\n \t\t}\n-\t\tprintf(\"Usage: perf <reset>\\n\");\n+\t\tprintf(\"Usage: perf [reset | latency]\\n\");\n \t\treturn -1;\n \t}\n "}]}