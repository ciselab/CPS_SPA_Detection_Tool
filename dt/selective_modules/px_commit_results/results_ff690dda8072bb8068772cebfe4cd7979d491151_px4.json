{"sha":"ff690dda8072bb8068772cebfe4cd7979d491151","node_id":"MDY6Q29tbWl0NTI5ODc5MDpmZjY5MGRkYTgwNzJiYjgwNjg3NzJjZWJmZTRjZDc5NzlkNDkxMTUx","commit":{"author":{"name":"Mark Whitehorn","email":"kd0aij@gmail.com","date":"2016-01-18T03:41:36Z"},"committer":{"name":"Lorenz Meier","email":"lm@inf.ethz.ch","date":"2016-01-24T10:22:18Z"},"message":"increase priority of sPort_telemetry to 200","tree":{"sha":"023a35faa4e277dd3287169a14ba6fc407bfa5c7","url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/trees/023a35faa4e277dd3287169a14ba6fc407bfa5c7"},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/commits/ff690dda8072bb8068772cebfe4cd7979d491151","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/ff690dda8072bb8068772cebfe4cd7979d491151","html_url":"https://github.com/PX4/PX4-Autopilot/commit/ff690dda8072bb8068772cebfe4cd7979d491151","comments_url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/ff690dda8072bb8068772cebfe4cd7979d491151/comments","author":{"login":"kd0aij","id":2300221,"node_id":"MDQ6VXNlcjIzMDAyMjE=","avatar_url":"https://avatars.githubusercontent.com/u/2300221?v=4","gravatar_id":"","url":"https://api.github.com/users/kd0aij","html_url":"https://github.com/kd0aij","followers_url":"https://api.github.com/users/kd0aij/followers","following_url":"https://api.github.com/users/kd0aij/following{/other_user}","gists_url":"https://api.github.com/users/kd0aij/gists{/gist_id}","starred_url":"https://api.github.com/users/kd0aij/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/kd0aij/subscriptions","organizations_url":"https://api.github.com/users/kd0aij/orgs","repos_url":"https://api.github.com/users/kd0aij/repos","events_url":"https://api.github.com/users/kd0aij/events{/privacy}","received_events_url":"https://api.github.com/users/kd0aij/received_events","type":"User","site_admin":false},"committer":{"login":"LorenzMeier","id":1208119,"node_id":"MDQ6VXNlcjEyMDgxMTk=","avatar_url":"https://avatars.githubusercontent.com/u/1208119?v=4","gravatar_id":"","url":"https://api.github.com/users/LorenzMeier","html_url":"https://github.com/LorenzMeier","followers_url":"https://api.github.com/users/LorenzMeier/followers","following_url":"https://api.github.com/users/LorenzMeier/following{/other_user}","gists_url":"https://api.github.com/users/LorenzMeier/gists{/gist_id}","starred_url":"https://api.github.com/users/LorenzMeier/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/LorenzMeier/subscriptions","organizations_url":"https://api.github.com/users/LorenzMeier/orgs","repos_url":"https://api.github.com/users/LorenzMeier/repos","events_url":"https://api.github.com/users/LorenzMeier/events{/privacy}","received_events_url":"https://api.github.com/users/LorenzMeier/received_events","type":"User","site_admin":false},"parents":[{"sha":"bb565f5d6aed28dbcc4d839c5592eb423e776664","url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/bb565f5d6aed28dbcc4d839c5592eb423e776664","html_url":"https://github.com/PX4/PX4-Autopilot/commit/bb565f5d6aed28dbcc4d839c5592eb423e776664"}],"stats":{"total":83,"additions":40,"deletions":43},"files":[{"sha":"c3028003cdf0c485bb6d9eda913c45855f058f23","filename":"src/drivers/sPort_telemetry/sPort_data.c","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/ff690dda8072bb8068772cebfe4cd7979d491151/src%2Fdrivers%2FsPort_telemetry%2FsPort_data.c","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/ff690dda8072bb8068772cebfe4cd7979d491151/src%2Fdrivers%2FsPort_telemetry%2FsPort_data.c","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fdrivers%2FsPort_telemetry%2FsPort_data.c?ref=ff690dda8072bb8068772cebfe4cd7979d491151","patch":"@@ -112,14 +112,12 @@ void sPort_init()\n static void sPort_send_start(int uart)\n {\n \tstatic const uint8_t c = 0x10;\n-\twrite(uart, &c, sizeof(c));\n+\twrite(uart, &c, 1);\n }\n \n-static void update_crc(uint16_t *crc)\n+static void update_crc(uint16_t *crc, uint8_t b)\n {\n-\t*crc += 0x10;\n-\t*crc += *crc >> 8;\n-\t*crc &= 0xFF;\n+\t*crc += b;\n \t*crc += *crc >> 8;\n \t*crc &= 0xFF;\n }\n@@ -152,27 +150,30 @@ static void sPort_send_byte(int uart, uint8_t value)\n  */\n void sPort_send_data(int uart, uint16_t id, uint32_t data)\n {\n-    union {\n-        uint16_t word;\n-        uint8_t byte[2];\n-    } wbuf;\n-    \n+\tunion {\n+\t\tuint32_t word;\n+\t\tuint8_t byte[4];\n+\t} buf;\n+\n \tuint16_t crc = 0;\n \tsPort_send_start(uart);\n+//\twrite(uart, 0x10, 1);\n \n-\twbuf.word = id;\n+\tbuf.word = id;\n \n \tfor (int i = 0; i < 2; i++) {\n-\t\tupdate_crc(&crc);\n-\t\tsPort_send_byte(uart, wbuf.byte[i]);      /* LSB first */\n+\t\tupdate_crc(&crc, buf.byte[i]);\n+\t\tsPort_send_byte(uart, buf.byte[i]);      /* LSB first */\n \t}\n \n-\tuint8_t *bbuf = (uint8_t *)data;\n+\tbuf.word = data;\n \n \tfor (int i = 0; i < 4; i++) {\n-\t\tupdate_crc(&crc);\n-\t\tsPort_send_byte(uart, bbuf[i]);      /* LSB first */\n+\t\tupdate_crc(&crc, buf.byte[i]);\n+\t\tsPort_send_byte(uart, buf.byte[i]);      /* LSB first */\n \t}\n+\n+\tsPort_send_byte(uart, crc); \n }\n \n #ifdef xxxx"},{"sha":"cd1500038bac7253139821fb5be79b42028b0ce7","filename":"src/drivers/sPort_telemetry/sPort_telemetry.c","status":"modified","additions":23,"deletions":27,"changes":50,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/ff690dda8072bb8068772cebfe4cd7979d491151/src%2Fdrivers%2FsPort_telemetry%2FsPort_telemetry.c","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/ff690dda8072bb8068772cebfe4cd7979d491151/src%2Fdrivers%2FsPort_telemetry%2FsPort_telemetry.c","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fdrivers%2FsPort_telemetry%2FsPort_telemetry.c?ref=ff690dda8072bb8068772cebfe4cd7979d491151","patch":"@@ -49,11 +49,13 @@\n #include <stdbool.h>\n #include <string.h>\n #include <sys/types.h>\n+#include <poll.h>\n #include <fcntl.h>\n #include <unistd.h>\n #include <systemlib/err.h>\n #include <systemlib/systemlib.h>\n #include <termios.h>\n+#include <drivers/drv_hrt.h>\n \n #include \"sPort_data.h\"\n \n@@ -76,23 +78,13 @@ __EXPORT int sPort_telemetry_main(int argc, char *argv[]);\n static int sPort_open_uart(const char *uart_name, struct termios *uart_config_original)\n {\n \t/* Open UART */\n-\tconst int uart = open(uart_name, O_RDWR | O_NOCTTY);\n+\tconst int uart = open(uart_name, O_RDWR | O_NOCTTY | O_NONBLOCK);\n+//\tconst int uart = open(uart_name, O_RDWR | O_NOCTTY);\n \n \tif (uart < 0) {\n \t\terr(1, \"Error opening port: %s\", uart_name);\n \t}\n \n-\t/* make sure uart FD is blocking */\n-\tint flags = fcntl(uart, F_GETFL);\n-\tif (flags < 0) {\n-\t\terr(1, \"Error getting FD flags: %s\", uart_name);\n-\t}\n-\tflags &= ~O_NONBLOCK;\n-\tflags = fcntl(uart, F_SETFL, flags);\n-\tif (flags < 0) {\n-\t\terr(1, \"Error setting FD flags: %s\", uart_name);\n-\t}\n-\t\n \t/* Back up the original UART configuration to restore it after exit */\n \tint termios_state;\n \n@@ -175,33 +167,37 @@ static int sPort_telemetry_thread_main(int argc, char *argv[])\n \t\terr(1, \"could not open %s\", device_name);\n \t}\n \n+\t/* poll descriptor */\n+\tstruct pollfd fds[1];\n+\tfds[0].fd = uart;\n+\tfds[0].events = POLLIN;\n+\n \t/* Subscribe to topics */\n \tsPort_init();\n \n \tthread_running = true;\n \n \t/* Main thread loop */\n-\tchar sbuf[2];\n-\tuint8_t fiftyfive = 0x55;\n+\tchar sbuf[20];\n \n \twhile (!thread_should_exit) {\n \n \t\t/* wait for poll frame starting with value 0x7E */\n-\t\tint newBytes = read(uart, &sbuf[0], 1);\n-//\t\twarnx(\"%x, %x \\n\", sbuf[0], sbuf[1]);\n+\t\tint status = poll(fds, sizeof(fds) / sizeof(fds[0]), -1);\n+\t\tif (status < 1) continue;\n \t\t\n+\t\t// read 2 bytes\n+\t\tint newBytes = read(uart, &sbuf[0], 2);\n \t\tif (newBytes < 1 || sbuf[0] != 0x7E) continue;\n \t\t\n-\t\t/* read the ID byte */\n-\t\tsbuf[1] = read(uart, &sbuf[0], 1);\n-\t\t\n-//\t\tsPort_send_data(uart, id, 7);\n-\t\t\n-\t\t/*** test ***/\n-\t\t/* write single byte */\n-\t\twrite(uart, &fiftyfive, 1);\n-\t\t/* read it back */\n-\t\tread(uart, &sbuf[0], 1);\n+\t\t/* device ID 4 */\n+\t\tstatic uint8_t counter = 0;\n+\t\tif (sbuf[1] == 0xe4) {\t\t\n+\t\t\t/* send data for A2 */\n+\t\t\tsPort_send_data(uart, 0xf103, counter++);\n+\t\t\t/* read it back */\n+\t\t\tread(uart, &sbuf[0], sizeof(sbuf));\n+\t\t}\n \t}\n \n \t/* Reset the UART flags to original state */\n@@ -233,7 +229,7 @@ int sPort_telemetry_main(int argc, char *argv[])\n \t\tthread_should_exit = false;\n \t\tsPort_task = px4_task_spawn_cmd(\"sPort_telemetry\",\n \t\t\t\t\t\tSCHED_DEFAULT,\n-\t\t\t\t\t\tSCHED_PRIORITY_DEFAULT,\n+\t\t\t\t\t\t200,\n \t\t\t\t\t\t2000,\n \t\t\t\t\t\tsPort_telemetry_thread_main,\n \t\t\t\t\t\t(char *const *)argv);"}]}