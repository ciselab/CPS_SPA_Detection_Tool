{"sha":"5fe376c7b9bed861768680089bff3c62a030e2b6","node_id":"MDY6Q29tbWl0NTI5ODc5MDo1ZmUzNzZjN2I5YmVkODYxNzY4NjgwMDg5YmZmM2M2MmEwMzBlMmI2","commit":{"author":{"name":"px4dev","email":"px4@purgatory.org","date":"2013-01-26T08:01:25Z"},"committer":{"name":"px4dev","email":"px4@purgatory.org","date":"2013-01-26T08:01:25Z"},"message":"Correctness fixes from Tridge.; increased the minimum poll rate to 50Hz, don't set the input RC timestamp unless we get data.","tree":{"sha":"45de6032f65606bbb36793a9b4492c130e83e6db","url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/trees/45de6032f65606bbb36793a9b4492c130e83e6db"},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/commits/5fe376c7b9bed861768680089bff3c62a030e2b6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/5fe376c7b9bed861768680089bff3c62a030e2b6","html_url":"https://github.com/PX4/PX4-Autopilot/commit/5fe376c7b9bed861768680089bff3c62a030e2b6","comments_url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/5fe376c7b9bed861768680089bff3c62a030e2b6/comments","author":{"login":"px4dev","id":2095699,"node_id":"MDQ6VXNlcjIwOTU2OTk=","avatar_url":"https://avatars.githubusercontent.com/u/2095699?v=4","gravatar_id":"","url":"https://api.github.com/users/px4dev","html_url":"https://github.com/px4dev","followers_url":"https://api.github.com/users/px4dev/followers","following_url":"https://api.github.com/users/px4dev/following{/other_user}","gists_url":"https://api.github.com/users/px4dev/gists{/gist_id}","starred_url":"https://api.github.com/users/px4dev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/px4dev/subscriptions","organizations_url":"https://api.github.com/users/px4dev/orgs","repos_url":"https://api.github.com/users/px4dev/repos","events_url":"https://api.github.com/users/px4dev/events{/privacy}","received_events_url":"https://api.github.com/users/px4dev/received_events","type":"User","site_admin":false},"committer":{"login":"px4dev","id":2095699,"node_id":"MDQ6VXNlcjIwOTU2OTk=","avatar_url":"https://avatars.githubusercontent.com/u/2095699?v=4","gravatar_id":"","url":"https://api.github.com/users/px4dev","html_url":"https://github.com/px4dev","followers_url":"https://api.github.com/users/px4dev/followers","following_url":"https://api.github.com/users/px4dev/following{/other_user}","gists_url":"https://api.github.com/users/px4dev/gists{/gist_id}","starred_url":"https://api.github.com/users/px4dev/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/px4dev/subscriptions","organizations_url":"https://api.github.com/users/px4dev/orgs","repos_url":"https://api.github.com/users/px4dev/repos","events_url":"https://api.github.com/users/px4dev/events{/privacy}","received_events_url":"https://api.github.com/users/px4dev/received_events","type":"User","site_admin":false},"parents":[{"sha":"b46d05835b9ff55c1f21d37483202888eeea1656","url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/b46d05835b9ff55c1f21d37483202888eeea1656","html_url":"https://github.com/PX4/PX4-Autopilot/commit/b46d05835b9ff55c1f21d37483202888eeea1656"}],"stats":{"total":92,"additions":48,"deletions":44},"files":[{"sha":"a0e9b18d231658bb815a207c66013fc7d6710b85","filename":"apps/drivers/px4io/px4io.cpp","status":"modified","additions":48,"deletions":44,"changes":92,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/5fe376c7b9bed861768680089bff3c62a030e2b6/apps%2Fdrivers%2Fpx4io%2Fpx4io.cpp","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/5fe376c7b9bed861768680089bff3c62a030e2b6/apps%2Fdrivers%2Fpx4io%2Fpx4io.cpp","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/apps%2Fdrivers%2Fpx4io%2Fpx4io.cpp?ref=5fe376c7b9bed861768680089bff3c62a030e2b6","patch":"@@ -411,9 +411,9 @@ PX4IO::task_main()\n \t\t\t_update_interval = 0;\n \t\t}\n \n-\t\t/* sleep waiting for topic updates, but no more than 100ms */\n+\t\t/* sleep waiting for topic updates, but no more than 20ms */\n \t\tunlock();\n-\t\tint ret = ::poll(&fds[0], sizeof(fds) / sizeof(fds[0]), 100);\n+\t\tint ret = ::poll(&fds[0], sizeof(fds) / sizeof(fds[0]), 20);\n \t\tlock();\n \n \t\t/* this would be bad... */\n@@ -422,6 +422,9 @@ PX4IO::task_main()\n \t\t\tcontinue;\n \t\t}\n \n+\t\tperf_begin(_perf_update);\n+\t\thrt_abstime now = hrt_absolute_time();\n+\n \t\t/* if we have new control data from the ORB, handle it */\n \t\tif (fds[0].revents & POLLIN)\n \t\t\tio_set_control_state();\n@@ -430,47 +433,47 @@ PX4IO::task_main()\n \t\tif ((fds[1].revents & POLLIN) || (fds[2].revents & POLLIN))\n \t\t\tio_set_arming_state();\n \n-\t\thrt_abstime now = hrt_absolute_time();\n-\n-\t\t/*\n-\t\t * If this isn't time for the next tick of the polling state machine,\n-\t\t * go back to sleep.\n-\t\t */\n-\t\tif ((now - last_poll_time) < 20000)\n-\t\t\tcontinue;\n-\n-\t\t/*\n-\t\t * Pull status and alarms from IO.\n-\t\t */\n-\t\tio_get_status();\n-\n \t\t/*\n-\t\t * Get R/C input from IO.\n+\t\t * If it's time for another tick of the polling status machine,\n+\t\t * try it now.\n \t\t */\n-\t\tio_publish_raw_rc();\n-\n-\t\t/*\n-\t\t * Fetch mixed servo controls and PWM outputs from IO.\n-\t\t *\n-\t\t * XXX We could do this at a reduced rate in many/most cases.\n-\t\t */\n-\t\tio_publish_mixed_controls();\n-\t\tio_publish_pwm_outputs();\n-\n-\t\t/*\n-\t\t * If parameters have changed, re-send RC mappings to IO\n-\t\t *\n-\t\t * XXX this may be a bit spammy\n-\t\t */\n-\t\tif (fds[3].revents & POLLIN) {\n-\t\t\tparameter_update_s pupdate;\n-\n-\t\t\t/* copy to reset the notification */\n-\t\t\torb_copy(ORB_ID(parameter_update), _t_param, &pupdate);\n-\n-\t\t\t/* re-upload RC input config as it may have changed */\n-\t\t\tio_set_rc_config();\n+\t\tif ((now - last_poll_time) >= 20000) {\n+\n+\t\t\t/*\n+\t\t\t * Pull status and alarms from IO.\n+\t\t\t */\n+\t\t\tio_get_status();\n+\n+\t\t\t/*\n+\t\t\t * Get raw R/C input from IO.\n+\t\t\t */\n+\t\t\tio_publish_raw_rc();\n+\n+\t\t\t/*\n+\t\t\t * Fetch mixed servo controls and PWM outputs from IO.\n+\t\t\t *\n+\t\t\t * XXX We could do this at a reduced rate in many/most cases.\n+\t\t\t */\n+\t\t\tio_publish_mixed_controls();\n+\t\t\tio_publish_pwm_outputs();\n+\n+\t\t\t/*\n+\t\t\t * If parameters have changed, re-send RC mappings to IO\n+\t\t\t *\n+\t\t\t * XXX this may be a bit spammy\n+\t\t\t */\n+\t\t\tif (fds[3].revents & POLLIN) {\n+\t\t\t\tparameter_update_s pupdate;\n+\n+\t\t\t\t/* copy to reset the notification */\n+\t\t\t\torb_copy(ORB_ID(parameter_update), _t_param, &pupdate);\n+\n+\t\t\t\t/* re-upload RC input config as it may have changed */\n+\t\t\t\tio_set_rc_config();\n+\t\t\t}\n \t\t}\n+\n+\t\tperf_end(_perf_update);\n \t}\n \n \tunlock();\n@@ -662,8 +665,6 @@ PX4IO::io_get_raw_rc_input(rc_input_values &input_rc)\n \tuint32_t channel_count;\n \tint\tret = OK;\n \n-\tinput_rc.timestamp = hrt_absolute_time();\n-\n \t/* we don't have the status bits, so input_source has to be set elsewhere */\n \tinput_rc.input_source = RC_INPUT_SOURCE_UNKNOWN;\n \t\n@@ -688,16 +689,19 @@ PX4IO::io_get_raw_rc_input(rc_input_values &input_rc)\n \t\tchannel_count = RC_INPUT_MAX_CHANNELS;\n \tinput_rc.channel_count = channel_count;\n \n-\tif (channel_count > 0)\n+\tif (channel_count > 0) {\n \t\tret = io_reg_get(PX4IO_PAGE_RAW_RC_INPUT, PX4IO_P_RAW_RC_BASE, input_rc.values, channel_count);\n+\t\tif (ret == OK)\n+\t\t\tinput_rc.timestamp = hrt_absolute_time();\n+\t}\n \n \treturn ret;\n }\n \n int\n PX4IO::io_publish_raw_rc()\n {\n-\t/* if no RC, just don't publish */\n+\t/* if no raw RC, just don't publish */\n \tif (!(_status & PX4IO_P_STATUS_FLAGS_RC_OK))\n \t\treturn OK;\n "}]}