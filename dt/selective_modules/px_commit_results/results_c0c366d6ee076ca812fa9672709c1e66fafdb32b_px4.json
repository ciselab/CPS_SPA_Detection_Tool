{"sha":"c0c366d6ee076ca812fa9672709c1e66fafdb32b","node_id":"MDY6Q29tbWl0NTI5ODc5MDpjMGMzNjZkNmVlMDc2Y2E4MTJmYTk2NzI3MDljMWU2NmZhZmRiMzJi","commit":{"author":{"name":"Anton Babushkin","email":"anton.babushkin@me.com","date":"2013-10-12T09:20:20Z"},"committer":{"name":"Anton Babushkin","email":"anton.babushkin@me.com","date":"2013-10-12T09:20:20Z"},"message":"position_estimator_inav: estimate distance to bottom rate, increase time of position estimation on only accelerometer, reduce weight for GPS if flow available","tree":{"sha":"60fe69c7e1279d5adedecf9a81ef136aa110b62f","url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/trees/60fe69c7e1279d5adedecf9a81ef136aa110b62f"},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/git/commits/c0c366d6ee076ca812fa9672709c1e66fafdb32b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/c0c366d6ee076ca812fa9672709c1e66fafdb32b","html_url":"https://github.com/PX4/PX4-Autopilot/commit/c0c366d6ee076ca812fa9672709c1e66fafdb32b","comments_url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/c0c366d6ee076ca812fa9672709c1e66fafdb32b/comments","author":{"login":"DrTon","id":4341525,"node_id":"MDQ6VXNlcjQzNDE1MjU=","avatar_url":"https://avatars.githubusercontent.com/u/4341525?v=4","gravatar_id":"","url":"https://api.github.com/users/DrTon","html_url":"https://github.com/DrTon","followers_url":"https://api.github.com/users/DrTon/followers","following_url":"https://api.github.com/users/DrTon/following{/other_user}","gists_url":"https://api.github.com/users/DrTon/gists{/gist_id}","starred_url":"https://api.github.com/users/DrTon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DrTon/subscriptions","organizations_url":"https://api.github.com/users/DrTon/orgs","repos_url":"https://api.github.com/users/DrTon/repos","events_url":"https://api.github.com/users/DrTon/events{/privacy}","received_events_url":"https://api.github.com/users/DrTon/received_events","type":"User","site_admin":false},"committer":{"login":"DrTon","id":4341525,"node_id":"MDQ6VXNlcjQzNDE1MjU=","avatar_url":"https://avatars.githubusercontent.com/u/4341525?v=4","gravatar_id":"","url":"https://api.github.com/users/DrTon","html_url":"https://github.com/DrTon","followers_url":"https://api.github.com/users/DrTon/followers","following_url":"https://api.github.com/users/DrTon/following{/other_user}","gists_url":"https://api.github.com/users/DrTon/gists{/gist_id}","starred_url":"https://api.github.com/users/DrTon/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DrTon/subscriptions","organizations_url":"https://api.github.com/users/DrTon/orgs","repos_url":"https://api.github.com/users/DrTon/repos","events_url":"https://api.github.com/users/DrTon/events{/privacy}","received_events_url":"https://api.github.com/users/DrTon/received_events","type":"User","site_admin":false},"parents":[{"sha":"2b1a11b16dd77a5b2a427e7a32a2e398b249ebad","url":"https://api.github.com/repos/PX4/PX4-Autopilot/commits/2b1a11b16dd77a5b2a427e7a32a2e398b249ebad","html_url":"https://github.com/PX4/PX4-Autopilot/commit/2b1a11b16dd77a5b2a427e7a32a2e398b249ebad"}],"stats":{"total":62,"additions":42,"deletions":20},"files":[{"sha":"f9fb5ab1bc8e4e47bfe08e487096fc9a79eeb35f","filename":"src/modules/position_estimator_inav/position_estimator_inav_main.c","status":"modified","additions":36,"deletions":19,"changes":55,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_main.c","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_main.c","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_main.c?ref=c0c366d6ee076ca812fa9672709c1e66fafdb32b","patch":"@@ -79,8 +79,8 @@ static bool verbose_mode = false;\n static const hrt_abstime gps_topic_timeout = 1000000;\t\t// GPS topic timeout = 1s\n static const hrt_abstime flow_topic_timeout = 1000000;\t// optical flow topic timeout = 1s\n static const hrt_abstime sonar_timeout = 150000;\t// sonar timeout = 150ms\n-static const hrt_abstime sonar_valid_timeout = 1000000;\t// assume that altitude == distance to surface during this time\n-static const hrt_abstime flow_valid_timeout = 1000000;\t// assume that altitude == distance to surface during this time\n+static const hrt_abstime sonar_valid_timeout = 1000000;\t// estimate sonar distance during this time after sonar loss\n+static const hrt_abstime xy_src_timeout = 2000000;\t// estimate position during this time after position sources loss\n static const uint32_t updates_counter_len = 1000000;\n static const uint32_t pub_interval = 10000;\t// limit publish rate to 100 Hz\n static const float max_flow = 1.0f;\t// max flow value that can be used, rad/s\n@@ -182,6 +182,7 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \tint baro_init_num = 200;\n \tfloat baro_offset = 0.0f;\t\t// baro offset for reference altitude, initialized only once\n \tfloat surface_offset = 0.0f;\t// ground level offset from reference altitude\n+\tfloat surface_offset_rate = 0.0f;\t// surface offset change rate\n \tfloat alt_avg = 0.0f;\n \tbool landed = true;\n \thrt_abstime landed_time = 0;\n@@ -226,7 +227,7 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \tfloat sonar_prev = 0.0f;\n \thrt_abstime sonar_time = 0;\t\t\t// time of last sonar measurement (not filtered)\n \thrt_abstime sonar_valid_time = 0;\t// time of last sonar measurement used for correction (filtered)\n-\thrt_abstime flow_valid_time = 0;\t// time of last flow measurement used for correction (filtered)\n+\thrt_abstime xy_src_time = 0;\t\t// time of last available position data\n \n \tbool gps_valid = false;\t\t\t// GPS is valid\n \tbool sonar_valid = false;\t\t// sonar is valid\n@@ -434,22 +435,26 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \t\t\t\t\t\tif (fabsf(sonar_corr - sonar_corr_filtered) > params.sonar_err) {\n \t\t\t\t\t\t\t/* spike detected, ignore */\n \t\t\t\t\t\t\tsonar_corr = 0.0f;\n+\t\t\t\t\t\t\tsurface_offset_rate = 0.0f;\n \t\t\t\t\t\t\tsonar_valid = false;\n \n \t\t\t\t\t\t} else {\n \t\t\t\t\t\t\t/* new ground level */\n \t\t\t\t\t\t\tsurface_offset -= sonar_corr;\n \t\t\t\t\t\t\tsonar_corr = 0.0f;\n \t\t\t\t\t\t\tsonar_corr_filtered = 0.0f;\n+\t\t\t\t\t\t\tsurface_offset_rate = 0.0f;\n \t\t\t\t\t\t\tsonar_valid_time = t;\n \t\t\t\t\t\t\tsonar_valid = true;\n \t\t\t\t\t\t\tlocal_pos.surface_bottom_timestamp = t;\n \t\t\t\t\t\t\tmavlink_log_info(mavlink_fd, \"[inav] new surface level: %.2f\", surface_offset);\n \t\t\t\t\t\t}\n \n \t\t\t\t\t} else {\n+\t\t\t\t\t\t/* correction is ok, use it */\n \t\t\t\t\t\tsonar_valid_time = t;\n \t\t\t\t\t\tsonar_valid = true;\n+\t\t\t\t\t\tsurface_offset_rate = -sonar_corr * params.w_alt_sonar;\n \t\t\t\t\t}\n \t\t\t\t}\n \n@@ -495,13 +500,12 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \t\t\t\t\tflow_corr[1] = flow_v[1] - y_est[1];\n \t\t\t\t\t/* adjust correction weight */\n \t\t\t\t\tfloat flow_q_weight = (flow_q - params.flow_q_min) / (1.0f - params.flow_q_min);\n-\t\t\t\t\tflow_w = att.R[2][2] * flow_q_weight;\n-\t\t\t\t\t/* if flow is not accurate, lower weight for it */\n+\t\t\t\t\tflow_w = att.R[2][2] * flow_q_weight / fmaxf(1.0f, flow_dist);\n+\t\t\t\t\t/* if flow is not accurate, reduce weight for it */\n \t\t\t\t\t// TODO make this more fuzzy\n \t\t\t\t\tif (!flow_accurate)\n-\t\t\t\t\t\tflow_w *= 0.2f;\n+\t\t\t\t\t\tflow_w *= 0.05f;\n \t\t\t\t\tflow_valid = true;\n-\t\t\t\t\tflow_valid_time = t;\n \n \t\t\t\t} else {\n \t\t\t\t\tflow_w = 0.0f;\n@@ -606,6 +610,7 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \t\t/* check for sonar measurement timeout */\n \t\tif (sonar_valid && t > sonar_time + sonar_timeout) {\n \t\t\tsonar_corr = 0.0f;\n+\t\t\tsurface_offset_rate = 0.0f;\n \t\t\tsonar_valid = false;\n \t\t}\n \n@@ -616,24 +621,35 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \t\tbool use_gps = ref_xy_inited && gps_valid && params.w_pos_gps_p > 0.00001f;\n \t\t/* use flow if it's valid and (accurate or no GPS available) */\n \t\tbool use_flow = flow_valid && (flow_accurate || !use_gps);\n-\t\t/* try to estimate xy even if no absolute position source available,\n-\t\t * if using optical flow velocity will be valid */\n-\t\tbool can_estimate_xy = use_gps || use_flow || (t < flow_valid_time + flow_valid_timeout);\n+\t\t/* try to estimate position during some time after position sources lost */\n+\t\tif (use_gps || use_flow) {\n+            xy_src_time = t;\n+\t\t}\n+\t\tbool can_estimate_xy = (t < xy_src_time + xy_src_timeout);\n \n \t\t/* baro offset correction if sonar available,\n \t\t * don't touch reference altitude, local_pos.ref_alt != baro_offset after this */\n \t\tif (sonar_valid) {\n-\t\t\tsurface_offset -= sonar_corr * params.w_alt_sonar * dt;\n+\t\t\tsurface_offset += surface_offset_rate * dt;\n \t\t}\n \n \t\t/* accelerometer bias correction */\n \t\tfloat accel_bias_corr[3] = { 0.0f, 0.0f, 0.0f };\n \n+\t\tfloat w_pos_gps_p = params.w_pos_gps_p;\n+\t\tfloat w_pos_gps_v = params.w_pos_gps_v;\n+\n+\t\t/* reduce GPS weight if optical flow is good */\n+\t\tif (use_flow && flow_accurate) {\n+\t\t\tw_pos_gps_p *= params.w_gps_flow;\n+\t\t\tw_pos_gps_v *= params.w_gps_flow;\n+\t\t}\n+\n \t\tif (use_gps) {\n-\t\t\taccel_bias_corr[0] -= gps_corr[0][0] * params.w_pos_gps_p * params.w_pos_gps_p;\n-\t\t\taccel_bias_corr[0] -= gps_corr[0][1] * params.w_pos_gps_v;\n-\t\t\taccel_bias_corr[1] -= gps_corr[1][0] * params.w_pos_gps_p * params.w_pos_gps_p;\n-\t\t\taccel_bias_corr[1] -= gps_corr[1][1] * params.w_pos_gps_v;\n+\t\t\taccel_bias_corr[0] -= gps_corr[0][0] * w_pos_gps_p * w_pos_gps_p;\n+\t\t\taccel_bias_corr[0] -= gps_corr[0][1] * w_pos_gps_v;\n+\t\t\taccel_bias_corr[1] -= gps_corr[1][0] * w_pos_gps_p * w_pos_gps_p;\n+\t\t\taccel_bias_corr[1] -= gps_corr[1][1] * w_pos_gps_v;\n \t\t}\n \n \t\tif (use_flow) {\n@@ -681,12 +697,12 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \t\t\t}\n \n \t\t\tif (use_gps) {\n-\t\t\t\tinertial_filter_correct(gps_corr[0][0], dt, x_est, 0, params.w_pos_gps_p);\n-\t\t\t\tinertial_filter_correct(gps_corr[1][0], dt, y_est, 0, params.w_pos_gps_p);\n+\t\t\t\tinertial_filter_correct(gps_corr[0][0], dt, x_est, 0, w_pos_gps_p);\n+\t\t\t\tinertial_filter_correct(gps_corr[1][0], dt, y_est, 0, w_pos_gps_p);\n \n \t\t\t\tif (gps.vel_ned_valid && t < gps.timestamp_velocity + gps_topic_timeout) {\n-\t\t\t\t\tinertial_filter_correct(gps_corr[0][1], dt, x_est, 1, params.w_pos_gps_v);\n-\t\t\t\t\tinertial_filter_correct(gps_corr[1][1], dt, y_est, 1, params.w_pos_gps_v);\n+\t\t\t\t\tinertial_filter_correct(gps_corr[0][1], dt, x_est, 1, w_pos_gps_v);\n+\t\t\t\t\tinertial_filter_correct(gps_corr[1][1], dt, y_est, 1, w_pos_gps_v);\n \t\t\t\t}\n \t\t\t}\n \n@@ -765,6 +781,7 @@ int position_estimator_inav_thread_main(int argc, char *argv[])\n \t\t\tlocal_pos.dist_bottom_valid = t < sonar_valid_time + sonar_valid_timeout;\n \t\t\tif (local_pos.dist_bottom_valid) {\n \t\t\t\tlocal_pos.dist_bottom = -z_est[0] - surface_offset;\n+\t\t\t\tlocal_pos.dist_bottom_rate = -z_est[1] - surface_offset_rate;\n \t\t\t}\n \n \t\t\tlocal_pos.timestamp = t;"},{"sha":"0a00ae6bbce7bc94463502def806c6022d847303","filename":"src/modules/position_estimator_inav/position_estimator_inav_params.c","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_params.c","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_params.c","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_params.c?ref=c0c366d6ee076ca812fa9672709c1e66fafdb32b","patch":"@@ -47,6 +47,7 @@ PARAM_DEFINE_FLOAT(INAV_W_POS_GPS_P, 1.0f);\n PARAM_DEFINE_FLOAT(INAV_W_POS_GPS_V, 2.0f);\n PARAM_DEFINE_FLOAT(INAV_W_POS_ACC, 10.0f);\n PARAM_DEFINE_FLOAT(INAV_W_POS_FLOW, 5.0f);\n+PARAM_DEFINE_FLOAT(INAV_W_GPS_FLOW, 0.1f);\n PARAM_DEFINE_FLOAT(INAV_W_ACC_BIAS, 0.0f);\n PARAM_DEFINE_FLOAT(INAV_FLOW_K, 0.0165f);\n PARAM_DEFINE_FLOAT(INAV_FLOW_Q_MIN, 0.5f);\n@@ -65,6 +66,7 @@ int parameters_init(struct position_estimator_inav_param_handles *h)\n \th->w_pos_gps_v = param_find(\"INAV_W_POS_GPS_V\");\n \th->w_pos_acc = param_find(\"INAV_W_POS_ACC\");\n \th->w_pos_flow = param_find(\"INAV_W_POS_FLOW\");\n+\th->w_gps_flow = param_find(\"INAV_W_GPS_FLOW\");\n \th->w_acc_bias = param_find(\"INAV_W_ACC_BIAS\");\n \th->flow_k = param_find(\"INAV_FLOW_K\");\n \th->flow_q_min = param_find(\"INAV_FLOW_Q_MIN\");\n@@ -86,6 +88,7 @@ int parameters_update(const struct position_estimator_inav_param_handles *h, str\n \tparam_get(h->w_pos_gps_v, &(p->w_pos_gps_v));\n \tparam_get(h->w_pos_acc, &(p->w_pos_acc));\n \tparam_get(h->w_pos_flow, &(p->w_pos_flow));\n+\tparam_get(h->w_gps_flow, &(p->w_gps_flow));\n \tparam_get(h->w_acc_bias, &(p->w_acc_bias));\n \tparam_get(h->flow_k, &(p->flow_k));\n \tparam_get(h->flow_q_min, &(p->flow_q_min));"},{"sha":"e394edfa42effcfd889cc0be54ca47743d3ee379","filename":"src/modules/position_estimator_inav/position_estimator_inav_params.h","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_params.h","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_params.h","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2Fposition_estimator_inav%2Fposition_estimator_inav_params.h?ref=c0c366d6ee076ca812fa9672709c1e66fafdb32b","patch":"@@ -48,6 +48,7 @@ struct position_estimator_inav_params {\n \tfloat w_pos_gps_v;\n \tfloat w_pos_acc;\n \tfloat w_pos_flow;\n+\tfloat w_gps_flow;\n \tfloat w_acc_bias;\n \tfloat flow_k;\n \tfloat flow_q_min;\n@@ -66,6 +67,7 @@ struct position_estimator_inav_param_handles {\n \tparam_t w_pos_gps_v;\n \tparam_t w_pos_acc;\n \tparam_t w_pos_flow;\n+\tparam_t w_gps_flow;\n \tparam_t w_acc_bias;\n \tparam_t flow_k;\n \tparam_t flow_q_min;"},{"sha":"d567f2e0207a8345b6f0c35c1a1be0f1cfdd8a26","filename":"src/modules/uORB/topics/vehicle_local_position.h","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/PX4/PX4-Autopilot/blob/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2FuORB%2Ftopics%2Fvehicle_local_position.h","raw_url":"https://github.com/PX4/PX4-Autopilot/raw/c0c366d6ee076ca812fa9672709c1e66fafdb32b/src%2Fmodules%2FuORB%2Ftopics%2Fvehicle_local_position.h","contents_url":"https://api.github.com/repos/PX4/PX4-Autopilot/contents/src%2Fmodules%2FuORB%2Ftopics%2Fvehicle_local_position.h?ref=c0c366d6ee076ca812fa9672709c1e66fafdb32b","patch":"@@ -79,7 +79,7 @@ struct vehicle_local_position_s\n \tbool landed;\t\t\t/**< true if vehicle is landed */\n \t/* Distance to surface */\n \tfloat dist_bottom;\t\t/**< Distance to bottom surface (ground) */\n-\tfloat v_dist_bottom;\t\t/**< Distance to bottom surface (ground) change rate */\n+\tfloat dist_bottom_rate;\t\t/**< Distance to bottom surface (ground) change rate */\n \tuint64_t surface_bottom_timestamp;\t\t/**< Time when new bottom surface found */\n \tbool dist_bottom_valid;\t/**< true if distance to bottom surface is valid */\n };"}]}